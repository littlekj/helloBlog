# 第一阶段：构建依赖和虚拟环境
FROM python:3.9 AS builder

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PIP_INDEX_URL=https://mirrors.aliyun.com/pypi/simple/ \
    PROJECT_PATH=/usr/local/share/helloBlog

# 安装基本工具和依赖，并清理缓存
RUN apt-get update -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 安装 pipenv
RUN pip install --no-cache-dir --default-timeout=100 pipenv

# 设置工作目录
WORKDIR ${PROJECT_PATH}

# 复制项目文件到构建容器
COPY backend/Pipfile backend/Pipfile.lock ${PROJECT_PATH}/backend/

# 安装依赖并创建虚拟环境
RUN cd ${PROJECT_PATH}/backend && \
	pipenv --rm || true && \   
	pipenv install --deploy --ignore-pipfile --verbose

# 获取虚拟环境路径并保存到文件
RUN cd ${PROJECT_PATH}/backend && \
	echo $(pipenv --venv) > /venv_path.txt

# 第二阶段：创建精简的最终镜像
FROM python:3.9-slim

# 复制虚拟环境和路径文件
COPY --from=builder /root/.local/share/virtualenvs /root/.local/share/virtualenvs
COPY --from=builder /venv_path.txt /venv_path.txt

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PROJECT_PATH=/usr/local/share/helloBlog

# 设置工作目录
WORKDIR ${PROJECT_PATH}

# 复制项目文件到最终镜像
COPY . ${PROJECT_PATH}

# 复制配置文件
COPY backend/conf/uwsgi.ini.docker ${PROJECT_PATH}/backend/conf/uwsgi.ini
COPY backend/conf/supervisor/supervisord.conf /etc/
COPY backend/conf/supervisor/supervisord.d/myapp.ini.docker /etc/supervisord.d/myapp.ini

# 使用路径文件设置环境变量和创建必要的目录
RUN VENV_PATH=$(cat /venv_path.txt) && \
    echo "export PATH=${VENV_PATH}/bin:$PATH" >> /etc/profile && \
    echo "pythonhome=${VENV_PATH}" >> ${PROJECT_PATH}/backend/conf/uwsgi.ini && \
    echo "command=${VENV_PATH}/bin/uwsgi --ini ${PROJECT_PATH}/backend/conf/uwsgi.ini" >> /etc/supervisord.d/myapp.ini && \
    mkdir -p /var/log/supervisor

# 暴露 uWSGI 默认端口
EXPOSE 8000

# 复制 init.sh 到容器并设置可执行权限
COPY init.sh ${PROJECT_PATH}/init.sh
RUN chmod +x ${PROJECT_PATH}/init.sh

# 在容器启动时执行初始化操作
CMD ["sh", "-c", "${PROJECT_PATH}/init.sh"]
